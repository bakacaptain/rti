package publishers.raw;

import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.domain.DomainParticipantFactory;
import com.rti.dds.infrastructure.StatusKind;
import com.rti.dds.publication.Publisher;
import com.rti.dds.topic.Topic;
import com.rti.dds.type.builtin.StringDataWriter;
import com.rti.dds.type.builtin.StringTypeSupport;

public class RawPricePublisher implements Runnable {

	private BlockingQueue<String> queue;
	private DomainParticipant participant;
	
	public RawPricePublisher(){
		this.init();
	}
	
	private void init(){
		participant = DomainParticipantFactory
				.get_instance()
				.create_participant(
						0, // Domain id
						DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
						null, // listener
						StatusKind.STATUS_MASK_NONE);
		
		if(participant == null)
		{
			System.err.println("Unable to create the domain participant");
			return;
		}
		
		Topic topic = participant.create_topic(
				"RawPriceUpdated",
				StringTypeSupport.get_type_name(),
				DomainParticipant.TOPIC_QOS_DEFAULT,
				null, // listener
				StatusKind.STATUS_MASK_NONE);
		
		if(topic == null)
		{
			System.err.println("Unable to create topic");
			return;
		}
		
		StringDataWriter dataWriter = (StringDataWriter) participant.create_datawriter(
					topic,
					Publisher.DATAWRITER_QOS_DEFAULT,
					null, // listener
					StatusKind.STATUS_MASK_NONE);
		
		if(dataWriter == null)
		{
			System.err.println("Cannot create data writer\n");
			return;
		}
	}
	
	@Override
	public void run() {
		
	}
	
	public void stop(){
		
	}

}
